With edit 321, a number of changes have been made for ISO
compatibility.  Those that cause serious incompatibilities
with older programs are:
  - MOD and ROUND now follow the ISO standard.  This matters
	only for negative arguments.  I MOD J is now illegal
	for negative J, and always returns a postivie number
	even for negative I.  It used to be the remainder after
	integer division.  ROUND now handles values like -1.5
	correctly.  ROUND(-1.5) is now -2.0.  It used to be
	-1.0.
  - We now use a modified version of lazy I/O.  Only READLN
	and RESET have been changed.  READLN used to get the
	first character of the next line into INPUT^.  Now
	the GET is delayed until the next time someone refers
	to INPUT^, EOF(INPUT), EOLN(INPUT), etc.  RESET used
	to get the first character of the file into INPUT^.
	That GET is similarly delayed.  This effect occurs
	only for text files.  Delaying does *NOT* occur if you
	open your file for interactive I/O.  For this reason
	we do not expect that many programs will be affected.
	It used to be that if you cared about timing, you 
	probably declared your file interactive.  Such files
	will still work as before.  The biggest problem has
	turned out to be that TTY used to be interactive and
	is now not.  To force the old behavior, mention TTY:/
	in your program statement, e.g.
		program foo(input,output,tty:/)
  - Comments written with (* *) and { } no longer nest.  It
	used to be that you could do the following:
{Here is an example of correct use of this:
	foo; (* first thing *)
	bar; (* second thing *)
 Isn't that simple }
	ISO requires that the first *) close the comment, even
	though it began with {.  There are two more forms of
	comment: /* / and % \.  Because ISO does not define
	those forms, I still allow them to nest.  This particular
	change has turned out to cause bugs that are quite unexpected.
	It is particularly insidious when an INCLUDE'd file is involved.
	We suggest that you check any files you have on system
	directories for people to INCLUDE.
With edit 201, the I/O system has been redone to handle internal files.
There are some incompatibilites:
  - When you are end of line, the character in INPUT^ is
	now a blank, as required by the standard.  Previously
	you saw the actual end of line character.  To see
	the actual character, you must turn on an option.
	If you open the file INPUT via the PROGRAM statement,
	specify PROGRAM FOO(INPUT:#).  The :# specifies the
	option to see end of line.  (It way be combined with
	/ for interactive, e.g. PROGRAM FOO(INPUT:/#)    )
	If you open the file via a RESET, specify /E:
	RESET(INPUT,'foo.bar','/e').  If you also want it
	openned interactively, specify /e and /i:
	RESET(INPUT,'foo.bar','/i/e').  The old method of
	putting magic bits in magic arguments will still work,
	but the string argument specifying switches is clearly
	much better.  (Probably magic characters after INPUT:
	will also be replaced by a similar list of switches
	in the future.) Other useful switches are:
	/o - I will handle open errors myself (Pascal sets EOF)
	/d - I will handle data transmission errors myself
	/f - I will handle format errors in read myself
	/u - turn all lower case into upper case
	/b:xx - byte size xx used in the OPENF
  - When you do not specify a file name at all, e.g.
	RESET(INFILE), where INFILE was not listed in the
	PROGRAM statement, the system used to use the Pascal
	variable name for the file name, e.g. DSK:INFILE..
	Such cases are now treated as "internal files".  Pascal
	GENSYM's a file name, and the file is deleted when you
	exit from the lexical context in which the variable
	was defined (i.e. exit from the block, even by non-local
	GOTO, or DISPOSE of the record if the file is part of
	a record).
  - The default for BREAK and BREAKIN has been changed to OUTPUT
	and INPUT.  Previously the default was TTY.  I am trying
	to deemphasize the standard file TTY, since it is not
	present in standard Pascal.  Furthermore, BREAK(TTY) and
	BREAKIN(TTY) are essentially no-ops, so this does seem an
	odd default.
The major addition is that files can now be used in any reasonable
context, i.e. as parts of arrays, records, etc.  However FILE OF
FILE is still not implemented.

This version of Pascal should be completely upwards-compatible
with Jensen and Wirth, except for quantitative limitations
(nesting limits of blocks, maximum length of a routine, etc.).
Please report any cases where it is not.

With edit 247 of somewhere around there, I have  started implementing
the ISO standard.  Thus the new compiler supports conformant arrays and
very long variable names (200 characters). In order to have a complete
ISO implementation, it will also be necessary to detect programs that
violate certain restrictions.  So far I have not added all of these
checks.  I only added the checks that I regard are required by Jensen
and Wirth.  ISO is generally tighter than Jensen and Wirth.  I plan to
implement all of the ISO checks, but under a switch that the user can
control.  Here are the incompatibilities that resulted. Over time you
can expect more and more checks to be added.  If the errors involved can
be thought of as useful extensions, or if Jensen and Wirth is ambiguous
enough to allow them, then I will put the check under an ISO switch.  If
these are not the case, then I will not. Here are the major
incompatibilities in the newest version:

records:
  old: records were considered to match as long as they had the
	same type of fields, e.g. 
		polar = record angle,radius: real end;
		cartesian = record x,y: real end
	were considered to be compatible!!
  new: you must use the same type identifier, or they must appear in the
	same declaration.  This means that two different declarations
		polar = record angle,radius: real end;
	appearing in different blocks declare two different [incompatible]
	types.  This is the definition specified by the ISO standard.

arrays:
  old: arrays were considered to match as long as the the components had
	matching types and there were the same number.  This means that
	array[1..10]of integer would match array[0..9] of integer;
  new: the component types must match and the bounds must be identical.
	This is not quite as strong as ISO.  ISO has the same requirements
	from arrays as records.  That is, we allow
		a:array[1..10]of integer;
		b:array[1..10]of integer;
		a := b;
	but ISO does not.  To meet ISO, you must use
		a,b:array[1..10]of integer
	or
		array10 = array[1..10]of integer;
		a:array10;
		b:array10;
	I plan to enforce this at some future date under an ISO switch.

Also, I now enforce the restriction that you can't assign to the index
of a FOR loop inside it.  that is,
    for i := 1 to 10 do
      i := i + 1
is illegal.  I have not yet figured out how to detect when this happens
by means of a global reference from inside a procedure, but hope to do
so some time.
